# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Red Hat Inc.
# This file is distributed under the same license as the Automation Controller User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Automation Controller User Guide 4.3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-04 09:32+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/job_capacity.rst:2
msgid "This section describes how to determine capacity for instance groups and its impact to your jobs. For container groups, see :ref:`ag_container_capacity` in the |ata|."
msgstr "このセクションでは、インスタンスグループの容量とそのジョブへの影響を判断する方法を説明します。コンテナーグループについては、|ata| の :ref:`ag_container_capacity` を参照してください。"

#: ../../source/job_capacity.rst:4
msgid "The |at| capacity system determines how many jobs can run on an instance given the amount of resources available to the instance and the size of the jobs that are running (referred to as *Impact*). The algorithm used to determine this is based entirely on two things:"
msgstr "|at| 容量システムは、インスタンスで利用可能なリソース量や、実行中のジョブのサイズ (*影響* と呼ぶ) をもとに、インスタンスでいくつのジョブを実行可能か判断します。これを判断するのに使用するアルゴリズムは、2 つのアイテムだけをベースとします。"

#: ../../source/job_capacity.rst:6
msgid "How much memory is available to the system (``mem_capacity``)"
msgstr "システムで利用可能なメモリー容量 (``mem_capacity``)"

#: ../../source/job_capacity.rst:7
msgid "How much CPU is available to the system (``cpu_capacity``)"
msgstr "システムで利用可能な CPU 数 (``cpu_capacity``)"

#: ../../source/job_capacity.rst:9
msgid "Capacity also impacts Instance Groups. Since Groups are made up of instances, likewise, instances can be assigned to multiple groups. This means that impact to one instance can potentially affect the overall capacity of other Groups."
msgstr "容量は、インスタンスグループにも影響があります。グループはインスタンスで構成されるので、インスタンスを複数のグループに割り当てることができます。つまり、インスタンス 1 台への影響が、他のグループ全体の容量に影響を与える可能性があります。"

#: ../../source/job_capacity.rst:11
msgid "Instance Groups (not instances themselves) can be assigned to be used by jobs at various levels (see :ref:`ag_clustering`). When the Task Manager is preparing its graph to determine which group a job will run on, it will commit the capacity of an Instance Group to a job that hasn’t or isn’t ready to start yet."
msgstr "インスタンスグループ (インスタンス自体ではなく) は、さまざまなレベルのジョブで使用するために割り当てることができます (:ref:`ag_clustering` 参照)。タスクマネージャーはグラフを作成し、ジョブの実行先のグループや、起動の準備ができていないジョブに対してインスタンスグループの容量をコミットするかどうかを判断します。"

#: ../../source/job_capacity.rst:13
msgid "Finally, in smaller configurations, if only one instance is available for a job to run, the Task Manager will allow that job to run on the instance even if it pushes the instance over capacity. This guarantees that jobs themselves won't get stuck as a result of an under-provisioned system."
msgstr "最終的に、小規模な構成で、ジョブ実行に利用可能なインスタンスが 1 台しかない場合には、タスクマネージャーは、インスタンスが容量を超えていても、インスタンスでジョブが実行できるようにします。こうすることで、プロビジョニングが十分でないシステムでも、ジョブが停止しないようになります。"

#: ../../source/job_capacity.rst:15
msgid "Therefore, Capacity and Impact is not a zero-sum system relative to jobs and instances/Instance Groups."
msgstr "このように、容量および影響は、ジョブやインスタンス/インスタンスグループに対してゼロサムシステムではありません。"

#: ../../source/job_capacity.rst:17
msgid "For information on sliced jobs and their impact to capacity, see :ref:`ug_job_slice_execution`."
msgstr "スライスされたジョブおよび容量への影響に関する情報は、「:ref:`ug_job_slice_execution`」を参照してください。"

#: ../../source/job_capacity.rst:22
msgid "Resource determination for capacity algorithm"
msgstr "容量アルゴリズムに向けたリソースの判断"

#: ../../source/job_capacity.rst:24
msgid "The capacity algorithms are defined in order to determine how many forks a system is capable of running simultaneously. This controls how many systems Ansible itself will communicate with simultaneously. Increasing the number of forks a |at| system is running will, in general, allow jobs to run faster by performing more work in parallel. The trade-off is that this will increase the load on the system, which could cause work to slow down overall."
msgstr "容量アルゴリズムは、システムで同時に実行可能なフォーク数を判断するために定義します。これにより、Ansible 自体が同時に通信するシステム数を制御します。通常、|at| システムが実行するフォーク数が増えると、並行して作業が実行され、ジョブの実行速度がをより早くなります。代わりに、システムの負荷が増加し、全体的な作業速度が遅くなってしまう可能性があります。"

#: ../../source/job_capacity.rst:26
msgid "|At| can operate in two modes when determining capacity. ``mem_capacity`` (the default) will allow you to over-commit CPU resources while protecting the system from running out of memory. If most of your work is not CPU-bound, then selecting this mode will maximize the number of forks."
msgstr "|At| は、容量の判断時に、2 つのモードで稼働します。``mem_capacity`` (デフォルト) では、システムでメモリーがなくならないようにする一方で、CPU をオーバーコミットできます。作業の多くが CPU に依存していない場合には、このモードを選択して、フォーク数を最大化します。"

#: ../../source/job_capacity.rst:30
msgid "Memory relative capacity"
msgstr "メモリー対容量"

#: ../../source/job_capacity.rst:32
msgid "``mem_capacity`` is calculated relative to the amount of memory needed per fork. Taking into account the overhead for internal components, this comes out to be about 100MB per fork. When considering the amount of memory available to Ansible jobs, the capacity algorithm will reserve 2GB of memory to account for the presence of other services. The algorithm formula for this is:"
msgstr "``mem_capacity`` は、フォークごとに必要なメモリー容量に対して、計算されます。内部コンポーネントのオーバーヘッドを考慮すると、これは、フォークごとに約 100 MB になります。Ansible ジョブで利用可能なメモリー容量を検討する場合、容量アルゴリズムでは、他のサービスが存在することを考慮し、メモリー 2 GB を確保します。これに関するアルゴリズムの公式は以下のようになります。"

#: ../../source/job_capacity.rst:38
msgid "As an example:"
msgstr "以下に例を示します。"

#: ../../source/job_capacity.rst:44
msgid "Therefore, a system with 4GB of memory would be capable of running 20 forks. The value ``mem_per_fork`` can be controlled by setting the settings value (or environment variable) ``SYSTEM_TASK_FORKS_MEM``, which defaults to 100."
msgstr "このように、メモリー 4GB のシステムは、フォーク 20 個分実行することができます。``mem_per_fork`` の値は、設定値 (または環境変数) ``SYSTEM_TASK_FORKS_MEM`` (デフォルト値は 100) を設定して制御できます。"

#: ../../source/job_capacity.rst:49
msgid "CPU relative capacity"
msgstr "CPU 対容量"

#: ../../source/job_capacity.rst:51
msgid "Often, Ansible workloads can be fairly CPU-bound. In these cases, sometimes reducing the simultaneous workload allows more tasks to run faster and reduces the average time-to-completion of those jobs."
msgstr "頻繁に、Ansible のワークロードが CPU に大きく依存する場合があります。このような場合には、同時の実行するワークロードを減らして、タスクの実行速度を高め、これらのジョブの平均完了時間を短縮することができる場合があります。"

#: ../../source/job_capacity.rst:53
msgid "Just as the ``mem_capacity`` algorithm uses the amount of memory need per fork, the ``cpu_capacity`` algorithm looks at the amount of CPU resources is needed per fork. The baseline value for this is 4 forks per core. The algorithm formula for this is:"
msgstr "``mem_capacity`` アルゴリズムでフォークごとに必要なメモリー容量を使用するように ``cpu_capacity`` アルゴリズムも、フォークごとに必要な CPU リソース数に着目します。このベースラインの値として、コアごとのフォーク数が 4 つとなります。CPU のアルゴリズムの公式は以下のとおりです。"

#: ../../source/job_capacity.rst:59
msgid "For example, a 4-core system:"
msgstr "たとえば、4 つのコアが搭載されているシステムの場合:"

#: ../../source/job_capacity.rst:65
msgid "The value ``fork_per_cpu`` can be controlled by setting the settings value (or environment variable) ``SYSTEM_TASK_FORKS_CPU`` which defaults to 4."
msgstr "``fork_per_cpu`` の値は、設定値 (または環境変数) ``SYSTEM_TASK_FORKS_CPU`` (デフォルト値は 4) を設定して制御できます。"

#: ../../source/job_capacity.rst:69
msgid "Capacity job impacts"
msgstr "ジョブが影響を与える容量"

#: ../../source/job_capacity.rst:71
msgid "When selecting the capacity, it's important to understand how each job type affects capacity."
msgstr "容量を選択する場合に、各ジョブタイプがどのように容量に影響を与えるかを理解することが重要です。"

#: ../../source/job_capacity.rst:73
msgid "It's helpful to understand what forks mean to Ansible: https://www.ansible.com/blog/ansible-performance-tuning (see the section on \"Know Your Forks\")."
msgstr "Ansible におけるフォークの意味を理解しておくと役に立ちます (https://www.ansible.com/blog/ansible-performance-tuning の Know Your Forks セクションを参照)。"

#: ../../source/job_capacity.rst:75
msgid "The default forks value for Ansible is 5. However, if |at| knows that you're running against fewer systems than that, then the actual concurrency value will be lower."
msgstr "Ansible のデフォルトのフォーク値は 5 ですが、|at| では実際には 5 台未満のシステムに対して実行していることを認識しているため、実際の同時並行処理の値は 5 よりも少なくなります。"

#: ../../source/job_capacity.rst:77
msgid "When a job is run, |at| will add 1 to the number of forks selected to compensate for the Ansible parent process. So if you are running a playbook against 5 systems with a forks value of 5, then the actual forks value from the perspective of Job Impact will be 6."
msgstr "ジョブ実行時に、Ansible の親プロセスに対応するために、|at| はフォークの選択数に 1 つ追加します。そのため、フォークの値が 5 のシステム 5 台に対して、Playbook を実行する場合は、ジョブの影響に関する実際のフォーク値が 6 になります。"

#: ../../source/job_capacity.rst:81
msgid "Impact of job types in automation controller"
msgstr "自動コントローラーのジョブタイプの影響"

#: ../../source/job_capacity.rst:83
msgid "Jobs and Ad-hoc jobs follow the above model, forks + 1. If you set a fork value on your job template, your job capacity value will be the minimum of the forks value supplied, and the number of hosts that you have, plus one. The plus one is to account for the parent Ansible process."
msgstr "ジョブとアドホックのジョブは、上記のモデル (フォーク + 1) を採用します。ジョブテンプレートでフォークの値を設定する場合は、ジョブの容量値は指定のフォーク最小値、使用するホスト数に 1を加えた数値になります。1 を加えることで、親 Ansible プロセスに対応します。"

#: ../../source/job_capacity.rst:85
msgid "Instance capacity determines which jobs get assigned to any specific instance. Jobs and ad hoc commands use more capacity if they have a higher forks value."
msgstr "インスタンスの容量で、どのジョブを特定のインスタンスに割り当てるかを決定します。フォークの値が高く指定されている場合には、ジョブとアドホックコマンドは、より多くの容量を使用します。"

#: ../../source/job_capacity.rst:87
msgid "Other job types have a fixed impact:"
msgstr "他のジョブタイプへの影響は固定されています。"

#: ../../source/job_capacity.rst:89
msgid "Inventory Updates: 1"
msgstr "インベントリーの更新: 1"

#: ../../source/job_capacity.rst:90
msgid "Project Updates: 1"
msgstr "プロジェクトの更新: 1"

#: ../../source/job_capacity.rst:91
msgid "System Jobs: 5"
msgstr "システムジョブ: 5"

#: ../../source/job_capacity.rst:93
msgid "If you don’t set a forks value on your job template, your job will use Ansible’s default forks value of five. Even though Ansible defaults to five forks, it will use fewer if your job has fewer than five hosts. In general, setting a forks value higher than what the system is capable of could cause trouble by running out of memory or over-committing CPU. So, the job template fork values that you use should fit on the system. If you have playbooks using 1000 forks but none of your systems individually has that much capacity, then your systems are undersized and at risk of performance or resource issues."
msgstr "ジョブテンプレートにフォークの値を設定しない場合には、ジョブは Ansible のデフォルトのフォーク値 4 を使用します。Ansible のデフォルト値はフォーク 5 ですが、ジョブのホストが 5 台未満の場合には、フォークの使用数は少なくなります。一般的に、フォークの値に、システムの機能より高い数値を設定すると、メモリーが足りなくなったり、CPU をオーバーコミットしたりする問題が発生する可能性があります。個別のシステムではそれほど容量がないにも拘わらず、Playbook でフォーク 1000 個を使用する場合には、システムのサイズが小さすぎたり、パフォーマンスやリソースの問題のリスクが発生したりします。"

#: ../../source/job_capacity.rst:97
msgid "Selecting the right capacity"
msgstr "適切な容量の選択"

#: ../../source/job_capacity.rst:99
msgid "Selecting a capacity out of the CPU-bound or the memory-bound capacity limits is, in essence, selecting between the minimum or maximum number of forks. In the above examples, the CPU capacity would allow a maximum of 16 forks while the memory capacity would allow 20. For some systems, the disparity between these can be large and often times you may want to have a balance between these two."
msgstr "CPU バインドまたはメモリーバインドの容量制限から容量を選択するのは、実質的には、フォーク数の最小数または最大数を選択していることになります。上記の例では、CPU の容量でフォーク数を最大 16 個許容し、メモリー容量では 20 個許容できます。システムによっては、これらの差異は大きくなる可能性があり、多くの場合にこれらの 2 つの間でバランスを取っていくと良いでしょう。"

#: ../../source/job_capacity.rst:101
msgid "The instance field ``capacity_adjustment`` allows you to select how much of one or the other you want to consider. It is represented as a value between 0.0 and 1.0. If set to a value of 1.0, then the largest value will be used. The above example involves memory capacity, so a value of 20 forks would be selected. If set to a value of 0.0 then the smallest value will be used. A value of 0.5 would be a 50/50 balance between the two algorithms which would be 18:"
msgstr "インスタンスフィールド ``capacity_adjustment`` では、どちらをどの程度考慮するかを選択できます。これは、0.0 から 1.0 の値で表します。値を 1.0 に設定すると、最大値が使用されます。上記の例では、メモリー容量となるので、フォークの値を 20 が選択されます。値を 0.0 に設定すると、最小値が使用されます。また、0.5 は 2 つのアルゴリズムを 50/50 の割合で使用することになり、フォーク数は 18 になります。"

#: ../../source/job_capacity.rst:107
msgid "To view or edit the capacity in the user interface, select the **Instances** tab of the Instance Group."
msgstr "ユーザーインターフェースで容量を表示または編集するには、インスタンスグループの **インスタンス** タブを選択します。"

