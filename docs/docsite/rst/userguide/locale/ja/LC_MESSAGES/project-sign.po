# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Red Hat Inc.
# This file is distributed under the same license as the Automation Controller User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Automation Controller User Guide 4.3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-04 09:32+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/project-sign.rst:4
msgid "Project Signing and Verification"
msgstr "プロジェクトの署名と検証"

#: ../../source/project-sign.rst:11
msgid "Project signing and verification provides the ability to sign files in your project directory and then verify whether or not that content has changed in any way, or files have been added or removed from the project unexpectedly. To accomplish this, a private key for signing and a matching public key for verifying are needed."
msgstr "プロジェクトの署名と検証では、プロジェクトディレクトリー内のファイルに署名し、そのコンテンツが何らかの形で変更されていないかどうか、またはファイルがプロジェクトに予期せず追加または削除されていないかどうかを検証できます。そのためには、署名用の秘密鍵と検証用の対応する公開鍵が必要です。"

#: ../../source/project-sign.rst:13
msgid "For project maintainers, the supported way to perform content signing is to use a utility called, ``ansible-sign``, through the command-line interface (CLI) that comes with it."
msgstr "プロジェクト管理者の場合、サポートされているコンテンツ署名の実行方法は、付属のコマンドラインインターフェイス (CLI) を介して ``ansible-sign`` と呼ばれるユーティリティーを使用する方法です。"

#: ../../source/project-sign.rst:15
msgid "The CLI aims to make it easy to use cryptographic technology like GNU Privacy Guard (GPG) to validate that specified files within a project have not been tampered with in any way. Currently, GPG is the only supported means of signing and validation."
msgstr "CLI は、GNU Privacy Guard (GPG) などの暗号化技術を使用して、プロジェクト内の指定したファイルが改ざんされていないことを検証しやすくするためのものです。現時点で GPG は、サポートされている唯一の署名および検証方法です。"

#: ../../source/project-sign.rst:17
msgid "The |aa| controller is used to verify the signed content. After a matching public key has been associated with the signed project, the controller will verify that the files included during signing have not changed, and that files have been added or removed unexpectedly. If the signature is not valid or a file has changed, the project will fail to update, and no jobs making use of the project will be able to launch. Verification status of the project ensures that only secure, untampered content is run in jobs."
msgstr "|aa| コントローラーは、署名されたコンテンツを検証するために使用されます。一致する公開鍵が署名されたプロジェクトに関連付けられると、コントローラーは署名中に含まれるファイルが変更されていないこと、ファイルが予期せずに追加または削除されたことを確認します。署名が有効でない場合やファイルが変更された場合、プロジェクトは更新に失敗し、プロジェクトを使用するジョブが起動できなくなります。プロジェクトの検証ステータスにより、セキュアで改ざんされていないコンテンツのみがジョブで実行されることが保証されます。"

#: ../../source/project-sign.rst:19
msgid "Assuming that the repository has already been configured for signing and verification (see below), the usual workflow for altering the project becomes the following:"
msgstr "リポジトリーが署名と検証用にすでに設定されていると仮定した場合 (以下を参照)、プロジェクトを変更するための通常のワークフローは次のようになります。"

#: ../../source/project-sign.rst:21
msgid "User has a project repository set up already and wants to make a change to a file."
msgstr "ユーザーはすでにプロジェクトリポジトリーをセットアップしており、ファイルに変更を加えたいと考えています。"

#: ../../source/project-sign.rst:22
msgid "User makes the change, runs ``ansible-sign project gpg-sign /path/to/project``,  which updates a checksum manifest and signs it."
msgstr "ユーザーは変更を加え、チェックサムマニフェストを更新して署名する ``ansible-sign project gpg-sign /path/to/project`` を実行します。"

#: ../../source/project-sign.rst:23
msgid "User commits the change and the updated checksum manifest and the signature to the repository."
msgstr "ユーザーは、変更、更新されたチェックサムマニフェスト、および署名をリポジトリーにコミットします。"

#: ../../source/project-sign.rst:24
msgid "When the user syncs the project, the controller (already configured, in this scenario) pulls in the new changes, checks that the public key associated with the project in the controller matches the private key that the checksum manifest was signed with (this prevents tampering with the checksum manifest itself), then re-calculates checksums of each file in the manifest to ensure that the checksum matches (and thus that no file has changed). It also looks to ensure that all files are accounted for: They must have been either included in, or excluded from, the ``MANIFEST.in`` file discussed below; if files have been added or removed unexpectedly, verification will fail."
msgstr "ユーザーがプロジェクトを同期すると、コントローラー (このシナリオでは設定済み) が新しい変更を取得し、コントローラー内のプロジェクトに関連付けられている公開鍵が、チェックサムマニフェストの署名に使用された秘密鍵と一致することを確認します (これにより、チェックサムマニフェスト自体の改ざんが防止されます)。次に、マニフェスト内の各ファイルのチェックサムを再計算して、チェックサムが一致することを確認します (つまり、ファイルが変更されていないことを確認します)。また、すべてのファイルが考慮されていることも確認します。これらは、以下で説明する ``MANIFEST.in`` ファイルに含まれているか、除外されます。ファイルが予期せず追加または削除されている場合、検証は失敗します。"

#: ../../source/project-sign.rst:30
msgid "Prerequisites"
msgstr "前提条件"

#: ../../source/project-sign.rst:32
msgid "RHEL nodes must properly be subscribed to:"
msgstr "RHEL ノードは、以下を適切にサブスクライブする必要があります。"

#: ../../source/project-sign.rst:34
msgid "RHEL subscription and with **baseos** and **appstream** repositories enabled"
msgstr "RHEL サブスクリプションと、有効な **baseos** および **appstream** リポジトリー"

#: ../../source/project-sign.rst:35
msgid "|AAP| subscription and the proper |AAP| channel enabled:"
msgstr "|AAP| サブスクリプションと適切で有効な |AAP| チャネル:"

#: ../../source/project-sign.rst:43
msgid "A valid GPG public/private keypair is required for signing content. Refer to `How to create GPG keypairs`_ for details."
msgstr "コンテンツの署名には、有効な GPG 公開鍵/秘密鍵のペア必要です。詳細は、`How to create GPG keypairs`_ を参照してください。"

#: ../../source/project-sign.rst:47
msgid "Vist the `GnuPG documentation <https://www.gnupg.org/documentation/index.html>`_ for more information regarding GPG keys."
msgstr "GPG キーの詳細は、`GnuPG documentation <https://www.gnupg.org/documentation/index.html>`_ を参照してください。"

#: ../../source/project-sign.rst:49
msgid "You can verify that you have a valid GPG keypair and in your default GnuPG keyring, with the following command:"
msgstr "次のコマンドを使用して、有効な GPG キーペアがあり、デフォルトの GnuPG キーリングにあることを確認できます。"

#: ../../source/project-sign.rst:57
msgid "If the above command produces no output, or one line of output that states, ``trustdb was created``, then you do not have a secret key in your default keyring. In this case, refer to `How to create GPG keypairs`_ to learn how to create a new keypair before proceeding. If it produces output other than that, you have a valid secret key and are ready to move on to using ``ansible-sign``."
msgstr "上記のコマンドで出力や ``trustdb was created`` を示す 1 行の出力が生成されない場合は、デフォルトのキーリングに秘密鍵がありません。この場合、`How to create GPG keypairs`_ を参照して、続行する前に新しいキーペアを作成する方法を確認してください。それ以外の出力が生成された場合は有効な秘密鍵があり、続行して ``ansible-sign`` を使用できます。"

#: ../../source/project-sign.rst:61
msgid "Add a GPG key to Ansible Automation Controller"
msgstr "Ansible 自動コントローラーへの GPG キーの追加"

#: ../../source/project-sign.rst:63
msgid "In order to use the GPG key for content singing and validation in the controller, you must add it running the following command in the CLI:"
msgstr "コントローラーでコンテンツの署名と検証に GPG キーを使用するには、CLI で次のコマンドを実行して追加する必要があります。"

#: ../../source/project-sign.rst:71
msgid "In the controller user interface, click **Credentials** from the left side navigation menu then click the **Add** button."
msgstr "コントローラーのユーザーインターフェイスで、左側のナビゲーションメニューから **認証情報** をクリックし、**追加** ボタンをクリックします。"

#: ../../source/project-sign.rst:73
msgid "Provide the new credential a meaningful name (for example, “Infrastructure team public GPG key”)"
msgstr "新しい認証情報にわかりやすい名前を付けます (たとえば、インフラストラクチャーチームの公開 GPG キー)。"

#: ../../source/project-sign.rst:75
msgid "In the Credential Type field, select **GPG Public Key**."
msgstr "「認証情報タイプ」フィールドで、**GPG 公開鍵** を選択します。"

#: ../../source/project-sign.rst:77
msgid "Click **Browse** to locate and select the public key file (e.g., ``my_public_key.asc``)"
msgstr "**参照** をクリックして、公開鍵ファイルを見つけて選択します (例: ``my_public_key.asc``)。"

#: ../../source/project-sign.rst:79
msgid "Click **Save** when done."
msgstr "完了したら **保存** をクリックします。"

#: ../../source/project-sign.rst:83
msgid "This credential can now be selected in :ref:`projects <ug_projects_add>`, and content verification will automatically take place on future project syncs."
msgstr "これで、この認証情報は:ref:`projects <ug_projects_add>` 選択可能になり、コンテンツの検証は今後のプロジェクト同期で自動的に行われます。"

#: ../../source/project-sign.rst:89
msgid "Use the project cache SCM timeout to control how often you want the controller to re-validate the signed content. When a project is configured to update on launch (of any job template configured to use that project), you can enable the cache timeout setting, which tells it to update after N seconds have passed since the last update. If validation is running too frequently, you can slow down how often project updates occur by specifying the time in the **Cache Timeout** field of the Option Details pane of the project."
msgstr "プロジェクトキャッシュの SCM タイムアウトを使用して、コントローラーが署名済みコンテンツを再検証する頻度を制御します。プロジェクトが起動時に更新するように設定されている場合 (そのプロジェクトを使用するように設定されたジョブテンプレート)、キャッシュタイムアウト設定を有効にできます。これにより、最後の更新から N 秒が経過した後に更新するように指示されます。検証の実行頻度が高すぎる場合は、プロジェクトの「オプションの詳細」ペインの **キャッシュタイムアウト** フィールドに時間を指定して、プロジェクトの更新頻度を下げることができます。"

#: ../../source/project-sign.rst:96
msgid "Access the ``ansible-sign`` CLI utility"
msgstr "``ansible-sign`` CLI ユーティリティーへのアクセス"

#: ../../source/project-sign.rst:98
msgid "The ``ansible-sign`` utility provide options for the user to sign and verify whether the project is signed."
msgstr "``ansible-sign``ユーティリティーは、ユーザーが署名し、プロジェクトが署名されているかどうかを確認するためのオプションを提供します。"

#: ../../source/project-sign.rst:100
msgid "Run the following command to install ``ansible-sign``:"
msgstr "以下のコマンドを実行して ``ansible-sign`` をインストールします。"

#: ../../source/project-sign.rst:106
msgid "Verify that ``ansible-sign`` was successfully installed:"
msgstr "``ansible-sign`` が正常にインストールされたことを確認します。"

#: ../../source/project-sign.rst:113
msgid "Output similar to the following displays (possibly with a different version number):"
msgstr "以下のような出力が表示されます (バージョン番号が異なる場合があります)。"

#: ../../source/project-sign.rst:120
msgid "This indicates you have successfully installed ``ansible-sign``."
msgstr "これは、``ansible-sign`` が正常にインストールされたことを示します。"

#: ../../source/project-sign.rst:124
msgid "Signing your project"
msgstr "プロジェクトの同期"

#: ../../source/project-sign.rst:126
msgid "As the name suggests, signing a project involves an Ansible project directory. Refer to the `Ansible documentation <https://docs.ansible.com/ansible/latest/user_guide/sample_setup.html>`_ for more sophisticated examples of project directory structures."
msgstr "名前が示すように、プロジェクトへの署名には Ansible プロジェクトディレクトリーが関わります。プロジェクトディレクトリー構造のより洗練された例については、.`Ansible documentation <https://docs.ansible.com/ansible/latest/user_guide/sample_setup.html>`_ を参照してください。"

#: ../../source/project-sign.rst:128
msgid "The following sample project has a very simple structure. An inventory file, and two small playbooks under a playbooks directory:"
msgstr "次のサンプルプロジェクトの構造は非常に単純で、インベントリーファイルと、playbooks ディレクトリーの下の 2 つの小さな Playbook で構成されています。"

#: ../../source/project-sign.rst:145
msgid "The commands used in this section assume that your working directory is the root of your project. As a rule, ``ansible-sign project`` commands always take the project root directory as their last argument, and therefore, we use ``.`` to indicate the current working directory."
msgstr "このセクションで使用するコマンドは、作業ディレクトリーがプロジェクトのルートであると想定します。ルールとして、``ansible-sign project`` コマンドは常にプロジェクトの root ディレクトリーを最後の因数として使用するため、``.`` を使用して現在の作業ディレクトリーを示します。"

#: ../../source/project-sign.rst:147
msgid "The way that ``ansible-sign`` protects content from tampering is by taking checksums (SHA256) of all of the secured files in the project, compiling those into a checksum manifest file, and then finally signing that manifest file."
msgstr "``ansible-sign`` は、プロジェクト内にあるすべてのセキュアなファイルのチェックサム (SHA256) を取得し、それらをチェックサムマニフェストファイルにコンパイルしてから、最後にそのマニフェストファイルに署名することで、コンテンツを改ざんから保護します。"

#: ../../source/project-sign.rst:149
msgid "The first step toward signing content is to create a file that tells ``ansible-sign`` which files to protect. This file should be called ``MANIFEST.in`` and reside in the project root directory."
msgstr "コンテンツに署名する最初のステップは、``ansible-sign`` に保護するファイルを示すファイルを作成します。このファイルは ``MANIFEST.in`` という名前で、プロジェクトの root ディレクトリーに置く必要があります。"

#: ../../source/project-sign.rst:151
msgid "Internally, ``ansible-sign`` makes use of the ``distlib.manifest`` module of Python’s distlib library, and thus ``MANIFEST.in`` must follow the syntax that this library specifies. See the `Python Packaging User Guide <https://packaging.python.org/en/latest/guides/using-manifest-in/#manifest-in-commands>`_ for an explanation of the ``MANIFEST.in`` file directives."
msgstr "内部的には、``ansible-sign`` は Python の distlib ライブラリーの ``distlib.manifest`` モジュールを使用するため、``MANIFEST.in`` はこのライブラリーが指定する構文に従う必要があります。``MANIFEST.in`` ファイルディレクティブについては、`Python Packaging User Guide <https://packaging.python.org/en/latest/guides/using-manifest-in/#manifest-in-commands>`_ を参照してください。"

#: ../../source/project-sign.rst:153
msgid "In the sample project, included are two directives, resulting in a ``MANIFEST.in`` file that looks like this:"
msgstr "サンプルプロジェクトには 2 つのディレクティブが含まれており、以下のような ``MANIFEST.in`` ファイルが作成されます。"

#: ../../source/project-sign.rst:160
msgid "With this file in place, generate your checksum manifest file and sign it. Both of these steps are achieved in a single ``ansible-sign`` command:"
msgstr "このファイルを配置したら、チェックサムマニフェストファイルを生成して署名します。両方の手順は、1 つの ``ansible-sign`` コマンドで達成されます。"

#: ../../source/project-sign.rst:170
msgid "Now the project has been signed."
msgstr "これで、プロジェクトが署名されました。"

#: ../../source/project-sign.rst:172
msgid "Notice that the ``gpg-sign`` subcommand resides under the ``project`` subcommand. For signing project content, every command will start with ``ansible-sign project``. As noted above, as a rule, every ``ansible-sign project`` command takes the project root directory as its final argument."
msgstr "``gpg-sign`` サブコマンドは ``project`` サブコマンドの下にあることに注意してください。プロジェクトコンテンツに署名する場合、すべてのコマンドは ``ansible-sign project`` で始まります。前述したとおり、原則としてすべての ``ansible-sign project`` コマンドは、プロジェクトの root ディレクトリーを最終的な引数とします。"

#: ../../source/project-sign.rst:174
msgid "As mentioned earlier, ``ansible-sign`` by default makes use of your default keyring and looks for the first available secret key that it can find, to sign your project. You can specify a specific secret key to use with the ``--fingerprint`` option, or even a completely independent GPG home directory with the ``--gnupg-home`` option."
msgstr "前述のように、デフォルトでは ``ansible-sign`` はデフォルトのキーリングを使用し、最初に見つけられる秘密鍵を検索し、プロジェクトに署名します。``--fingerprint`` オプションで使用する特定の秘密鍵を指定するか、``--gnupg-home`` オプションで完全に独立した GPG ホームディレクトリーを指定することもできます。"

#: ../../source/project-sign.rst:178
msgid "If you are using a desktop environment, GnuPG will automatically prompt you for your secret key’s passphrase. If this functionality does not work, or you are working without a desktop environment (e.g., via SSH), you can use the ``-p/--prompt-passphrase`` flag after ``gpg-sign`` in the above command, which will cause ``ansible-sign`` to prompt for the password instead."
msgstr "デスクトップ環境を使用している場合、GnuPG は秘密鍵のパスフレーズを自動的に要求します。この機能が動作しない場合、またはデスクトップ環境なしで作業している場合 (SSH 経由など)、上記のコマンドで ``gpg-sign`` の後に ``-p/--prompt-passphrase`` フラグを使用できます。その場合、代わりに ``ansible-sign`` がパスワードを要求します。"

#: ../../source/project-sign.rst:180
msgid "Upon viewing the structure of the project directory, notice that a new ``.ansible-sign`` directory was created. This directory contains the checksum manifest and a detached GPG signature for it."
msgstr "プロジェクトディレクトリーの構造を表示すると、新しい ``.ansible-sign`` ディレクトリーが作成されたことが分かります。このディレクトリーには、チェックサムマニフェストと、そのディレクトリー用の分離 GPG 署名が含まれています。"

#: ../../source/project-sign.rst:197
msgid "Verifying your project"
msgstr "プロジェクトの検証"

#: ../../source/project-sign.rst:199
msgid "If you want to verify that a signed Ansible project has not been altered, you can use ``ansible-sign`` to check whether the signature is valid and that the checksums of the files match what the checksum manifest says they should be. In particular, the ``ansible-sign project gpg-verify`` command can be used to automatically verify both of these conditions."
msgstr "署名済みの Ansible プロジェクトが変更されていないことを確認する場合、``ansible-sign`` を使用して、署名が有効かどうか、ファイルのチェックサムがチェックサムマニフェストが示すものと一致するかどうかを確認できます。特に、``ansible-sign project gpg-verify`` コマンドを使用して、これらの両方の条件を自動的に検証できます。"

#: ../../source/project-sign.rst:210
msgid "By default, ``ansible-sign`` makes use of your default GPG keyring to look for a matching public key. You can specify a keyring file with the ``--keyring`` option, or a different GPG home with the ``--gnugpg-home`` option."
msgstr "デフォルトでは、``ansible-sign`` はデフォルトの GPG キーリングを使用して、一致する公開鍵を検索します。``--keyring`` オプションでキーリングファイルを指定するか、``--gnugpg-home`` オプションで別の GPG ホームを指定できます。"

#: ../../source/project-sign.rst:212
msgid "If verification fails for any reason, information will be displayed to help you debug the cause. More verbosity can be enabled by passing the global ``--debug`` flag, immediately after ``ansible-sign`` in your commands."
msgstr "何らかの理由で検証に失敗した場合は、原因のデバッグに役立つ情報が表示されます。コマンドで ``ansible-sign`` 直後にグローバル ``--debug`` フラグを渡すことで、より詳細な情報を有効にできます。"

#: ../../source/project-sign.rst:216
msgid "When a GPG credential is used in a project, content verification will automatically take place on future project syncs."
msgstr "GPG 認証情報がプロジェクトで使用されると、今後のプロジェクト同期時にコンテンツの検証が自動的に行われます。"

#: ../../source/project-sign.rst:221
msgid "Automate signing"
msgstr "自動署名"

#: ../../source/project-sign.rst:223
msgid "In environments with highly-trusted CI environments (e.g., OpenShift, Jenkins, etc.), it is possible to automate the signing process. For example, you could store your GPG private key in a CI platform of choice as a secret, and import that into GnuPG in the CI environment. You could then run through the signing workflow above within the normal CI workflow/container/environment."
msgstr "信頼性の高い CI 環境 (OpenShift、Jenkins など) を使用する環境では、署名プロセスを自動化できます。たとえば、選択した CI プラットフォームに GPG 秘密鍵をシークレットとして保存し、それを CI 環境の GnuPG にインポートできます。次に、通常の CI ワークフロー/コンテナー/環境内で上記の署名ワークフローを実行できます。"

#: ../../source/project-sign.rst:225
msgid "When signing a project using GPG, the environment variable ``ANSIBLE_SIGN_GPG_PASSPHRASE`` can be set to the passphrase of the signing key. This can be injected (and masked/secured) in a CI pipeline."
msgstr "GPG を使用してプロジェクトに署名する場合、環境変数 ``ANSIBLE_SIGN_GPG_PASSPHRASE`` を署名キーのパスフレーズに設定できます。これは CI パイプラインに注入 (およびマスク/保護) できます。"

#: ../../source/project-sign.rst:227
msgid "Depending on the scenario at hand, ``ansible-sign`` will return with a different exit-code, during both signing and verification. This can also be useful in the context of CI and automation, as a CI environment can act differently based on the failure (for example, sending alerts for some errors but silently failing for others)."
msgstr "直面したシナリオに応じて、署名中および検証中に異なる異なる終了コードで ``ansible-sign`` が返されます。CI 環境は障害に基づいて動作が異なる可能性があるため、これは CI と自動化のコンテキストでも役立ちます (たとえば、一部のエラーに対してアラートを送信し、他のエラーに対してはサイレントに失敗するなど)。"

#: ../../source/project-sign.rst:229
msgid "These are the exit codes used in ``ansible-sign`` currently, which can be considered stable:"
msgstr "以下は、現在 ``ansible-sign`` で使用され、安定しているとみなされる終了コードです。"

#: ../../source/project-sign.rst:235
msgid "Exit code"
msgstr "終了コード"

#: ../../source/project-sign.rst:236
msgid "Approximate meaning"
msgstr "おおよその意味"

#: ../../source/project-sign.rst:237
msgid "Example scenarios"
msgstr "シナリオ例"

#: ../../source/project-sign.rst:238
msgid "0"
msgstr "0"

#: ../../source/project-sign.rst:239
msgid "Success"
msgstr "成功"

#: ../../source/project-sign.rst:240
msgid "Signing was successful"
msgstr "署名に成功しました"

#: ../../source/project-sign.rst:241
msgid "Verification was successful"
msgstr "検証に成功しました"

#: ../../source/project-sign.rst:242
msgid "1"
msgstr "1"

#: ../../source/project-sign.rst:243
msgid "General failure"
msgstr "一般的な失敗"

#: ../../source/project-sign.rst:244
msgid "The checksum manifest file contained a syntax error during verification"
msgstr "検証中にチェックサムマニフェストファイルに構文エラーが見つかりました"

#: ../../source/project-sign.rst:245
msgid "The signature file did not exist during verification"
msgstr "検証中、署名ファイルは見つかりませんでした"

#: ../../source/project-sign.rst:246
msgid "``MANIFEST.in`` did not exist during signing"
msgstr "署名中、``MANIFEST.in`` は見つかりませんでした"

#: ../../source/project-sign.rst:247
msgid "2"
msgstr "2"

#: ../../source/project-sign.rst:248
msgid "Checksum verification failure"
msgstr "チェックサム検証の失敗"

#: ../../source/project-sign.rst:249
msgid "The checksum hashes calculated during verification differed from what was in the signed checksum manifest (e.g., a project file was changed but the signing process was not re-completed)"
msgstr "検証中に計算されたチェックサムハッシュは、署名済みチェックサムマニフェストの内容と異なります (例: プロジェクトファイルが変更されたが署名プロセスは再度完了されなかった)"

#: ../../source/project-sign.rst:251
msgid "3"
msgstr "3"

#: ../../source/project-sign.rst:252
msgid "Signature verification failure"
msgstr "署名検証の失敗"

#: ../../source/project-sign.rst:253
msgid "The signer's public key was not in the user's GPG keyring"
msgstr "署名者の公開鍵はユーザーの GPG キーリングにありません"

#: ../../source/project-sign.rst:254
#: ../../source/project-sign.rst:259
msgid "The wrong GnuPG home directory or keyring file was specified"
msgstr "間違った GnuPG ホームディレクトリーまたはキーリングファイルが指定されました"

#: ../../source/project-sign.rst:255
msgid "The signed checksum manifest file was modified in some way"
msgstr "署名済みチェックサムマニフェストファイルが何らかの方法で変更されました。"

#: ../../source/project-sign.rst:256
msgid "4"
msgstr "4"

#: ../../source/project-sign.rst:257
msgid "Signing process failure"
msgstr "署名プロセスの失敗"

#: ../../source/project-sign.rst:258
msgid "The signer's private key was not found in the GPG keyring"
msgstr "署名者の秘密鍵は GPG キーリングにありません"

